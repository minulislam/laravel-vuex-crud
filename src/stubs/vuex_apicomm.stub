const namespaced = true;

const state = {
	c_tokens: {},
};

const getters = {};

const actions = {
	callApi(context, call_data)
	{

		return new Promise((resolve, reject) => {
			let payload = {
				units: [
					call_data.data,
				]
			};

			let cancel_object = {};
			let has_cancel = false;

			if(('cancel_token_id' in call_data) && call_data.cancel_token_id.trim() !== '')
			{
				const CancelToken = axios.CancelToken;
				let cancel_source = CancelToken.source();

				let commit_object = {
					cancel_token_id: call_data.cancel_token_id,
					cancel_source: cancel_source
				};
				context.commit('saveCancelToken', commit_object);

				cancel_object = {
					cancelToken: cancel_source.token
				};

				has_cancel = true;
			}

			axios.post(call_data.data.api_route, payload , cancel_object).then(
				(response) => {
					if(('status' in response.data) && response.data.status === 'OK')
					{
						if(!('response_data' in response.data))
						{
							reject('Missing response data');
						}
						else if(response.data.response_data.length === 0)
						{
							reject('Data request returned no information for ' + call_data.unit);
						}
						else
						{
							resolve(response.data.response_data);
						}
					}
					else if(('status' in response.data) && response.data.status === 'FAILED')
					{
						if(('permission_fail' in response.data) && response.data.permission_fail === TRUE)
						{
							reject('Permission failure: ' . response.data.reason);
						}
						else
						{
							reject(response.data.reason);
						}
					}
					else
					{
						reject('Unknown failure in API call');
					}
				}
			).catch(function (error) {
				if(error)
				{
					if(('permission_fail' in error.data) && error.data.permission_fail === true)
					{
						reject('Permission failure: ' + error.data.reason);
					}
					else
					{
						reject('API call has failed');
					}
				}
			}).finally( function () {
				if(has_cancel)
				{
					context.commit('removeCancelToken', call_data.cancel_token_id);
				}
			});
		});
	}
};

const mutations = {
	saveCancelToken(state, cancel_object) {
		state.c_tokens[cancel_object.cancel_token_id] = cancel_object.cancel_source;
	},
	removeCancelToken(state, cancel__token_id) {
		delete(state.c_tokens[cancel__token_id]);
	}

};

export default {
	namespaced,
	state,
	getters,
	actions,
	mutations
}